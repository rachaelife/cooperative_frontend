import { useEffect, useState } from "react";import { Table, Button, Modal, Input, DatePicker, Select } from "antd";import { loanRepaymentServices, memberServices } from "../services/api";import moment from "moment";import { CgAdd } from "react-icons/cg";import PropTypes from 'prop-types';const LoanRepaymentHistory = ({ loanId, userId }) => {  const [repayments, setRepayments] = useState([]);  const [loading, setLoading] = useState(false);  const [showAddModal, setShowAddModal] = useState(false);  const [members, setMembers] = useState([]);  const [repaymentData, setRepaymentData] = useState({    loan_id: loanId || "",    user_id: userId || "",    amount: "",    payment_date: "",    payment_method: "",    notes: ""  });  const paymentMethods = [    { label: "Cash", value: "Cash" },    { label: "Bank Transfer", value: "Bank Transfer" },    { label: "Mobile Money", value: "Mobile Money" },    { label: "Check", value: "Check" },    { label: "Others", value: "Others" }  ];  // Fetch repayment history based on provided loanId or userId  const fetchRepayments = async () => {    setLoading(true);    try {      let data = [];      if (loanId) {        data = await loanRepaymentServices.getLoanRepayments(loanId);      } else if (userId) {        data = await loanRepaymentServices.getUserRepayments(userId);      } else {        data = await loanRepaymentServices.getAllRepayments();      }      setRepayments(data || []);    } catch (error) {      } finally {      setLoading(false);    }  };  const fetchMembers = async () => {    if (!userId) {      try {        const data = await memberServices.Allmembers();        setMembers(data || []);      } catch (error) {        }    }  };  useEffect(() => {    fetchRepayments();    fetchMembers();  }, [loanId, userId]);  const handleInputChange = (field, value) => {    setRepaymentData({      ...repaymentData,      [field]: value    });  };  const handleSubmit = async () => {    const { loan_id, user_id, amount, payment_date, payment_method, notes } = repaymentData;    if (!loan_id || !user_id || !amount || !payment_date || !payment_method) {      return;    }    const result = await loanRepaymentServices.recordRepayment(      loan_id,      user_id,      amount,      payment_date,      payment_method,      null, // No specific installment number      notes    );    if (result.success) {      setShowAddModal(false);      // Reset form      setRepaymentData({        loan_id: loanId || "",        user_id: userId || "",        amount: "",        payment_date: "",        payment_method: "",        notes: ""      });      // Refresh data      fetchRepayments();    }  };  const columns = [    {      title: "Member",      dataIndex: "fullname",      key: "fullname",    },    {      title: "Amount",      dataIndex: "amount",      key: "amount",      render: (text) => `â‚¦${parseFloat(text).toLocaleString()}`    },    {      title: "Payment Date",      dataIndex: "payment_date",      key: "payment_date",      render: (text) => moment(text).format("YYYY-MM-DD")    },    {      title: "Payment Method",      dataIndex: "payment_method",      key: "payment_method"    },    {      title: "Remaining Balance",      dataIndex: "remaining_balance",      key: "remaining_balance",      render: (text) => `â‚¦${parseFloat(text).toLocaleString()}`    },    {      title: "Notes",      dataIndex: "notes",      key: "notes"    }  ];  return (    <div>      <div className="flex justify-between items-center mb-4">        <h2 className="text-xl font-semibold">Loan Repayment History</h2>        <Button           type="primary"           onClick={() => setShowAddModal(true)}          className="bg-green-700 text-white"        >          <CgAdd /> Record Repayment        </Button>      </div>      <Table        dataSource={repayments}        columns={columns}        rowKey="repayment_id"        loading={loading}        pagination={{          pageSize: 10,          showSizeChanger: true,          showQuickJumper: true,          showTotal: (total, range) =>            `${range[0]}-${range[1]} of ${total} repayments`,        }}        locale={{          emptyText: (            <div className="text-center py-8">              <div className="text-gray-400 text-6xl mb-4">ðŸ’°</div>              <h3 className="text-lg font-medium text-gray-600 mb-2">No Repayment History Found</h3>              <p className="text-gray-500 mb-4">                There are currently no loan repayments recorded in the system.              </p>              <p className="text-sm text-gray-400">                Use the "Record Repayment" button above to add new repayment records.              </p>            </div>          )        }}      />      <Modal        title="Record Loan Repayment"        open={showAddModal}        onCancel={() => setShowAddModal(false)}        footer={null}      >        <form className="space-y-4" onSubmit={(e) => { e.preventDefault(); handleSubmit(); }}>          {!loanId && (            <div>              <label className="block mb-1">Loan ID</label>              <Input                 value={repaymentData.loan_id}                onChange={(e) => handleInputChange("loan_id", e.target.value)}                placeholder="Enter Loan ID"              />            </div>          )}          {!userId && (            <div>              <label className="block mb-1">Member</label>              <Select                 className="w-full"                value={repaymentData.user_id}                onChange={(value) => handleInputChange("user_id", value)}                placeholder="Select Member"                options={members.map((member) => ({                  label: member.fullname,                  value: member.user_id                }))}              />            </div>          )}          <div>            <label className="block mb-1">Amount</label>            <Input               type="number"              value={repaymentData.amount}              onChange={(e) => handleInputChange("amount", e.target.value)}              placeholder="Enter Amount"            />          </div>          <div>            <label className="block mb-1">Payment Date</label>            <DatePicker               className="w-full"              value={repaymentData.payment_date ? moment(repaymentData.payment_date) : null}              onChange={(date, dateString) => handleInputChange("payment_date", dateString)}            />          </div>          <div>            <label className="block mb-1">Payment Method</label>            <Select               className="w-full"              value={repaymentData.payment_method}              onChange={(value) => handleInputChange("payment_method", value)}              placeholder="Select Payment Method"              options={paymentMethods}            />          </div>          <div>            <label className="block mb-1">Notes (Optional)</label>            <Input.TextArea               value={repaymentData.notes}              onChange={(e) => handleInputChange("notes", e.target.value)}              placeholder="Enter Notes"              rows={3}            />          </div>          <div className="pt-4">            <Button               type="primary"               htmlType="submit"              className="w-full h-10 bg-green-700 text-white"            >              Record Payment            </Button>          </div>        </form>      </Modal>    </div>  );};LoanRepaymentHistory.propTypes = {  loanId: PropTypes.string,  userId: PropTypes.string};LoanRepaymentHistory.defaultProps = {  loanId: null,  userId: null};export default LoanRepaymentHistory; 